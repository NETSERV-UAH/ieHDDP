package DHTapp;

import org.onosproject.net.*;
import org.onosproject.net.config.NetworkConfigRegistry;
import org.onosproject.net.link.*;

import java.time.Duration;
import java.util.Set;

import org.onosproject.net.provider.ProviderId;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import static org.onosproject.net.PortNumber.portNumber;
import org.onosproject.net.device.DeviceService;
import org.onosproject.net.config.basics.BasicLinkConfig;
import org.onosproject.net.SparseAnnotations;

/**
 * @brief Provider de enlaces para DHT
 * @author Joaquin Alvarez Horcajo
 */

public class DHTproviderlink implements LinkProvider{

    /*!< @brief Servicio para interactuar con el inventario de dispositivos */
    //private DeviceService deviceService;
    //private LinkService linkService;

    /** Atributes */
    public static ProviderId PID;
    /** @brieg Servicio de Log*/
    private final Logger log = LoggerFactory.getLogger(getClass());
    private static final long DEF_BANDWIDTH = -1L;
    private static final double DEF_METRIC = -1;
    private static final Duration DEF_DURATION = Duration.ofNanos(-1L);

    /** Methods */

    /** @brief Creates a new element of DHTprovicerLink class.
     *
     */
    public DHTproviderlink(ProviderId pid){
        PID = pid;
    }

    /** @brief Signals that an infrastructure link has been detected.
     *
     * @param linkDescription LinkDescription
     * @param linkProviderService LinkProviderService
     */
    public void linkDetected(LinkDescription linkDescription, LinkProviderService linkProviderService) {
        linkProviderService.linkDetected(linkDescription);
    }

    public void linkVanished(String srcname, String dstname, LinkProviderService linkProviderService) {

        BasicLinkConfig link_config;

        String srcId = srcname.split("/")[0];
        String srcport = srcname.split("/")[1];

        String dstId = dstname.split("/")[0];
        String dstport = dstname.split("/")[1];

        /** Datos sobre el origen del enlace */
        ConnectPoint src = new ConnectPoint(DeviceId.deviceId(srcId),portNumber(srcport));

        /** Datos sobre el destino del enlace */
        ConnectPoint dst = new ConnectPoint(DeviceId.deviceId(dstId), portNumber(dstport));

        LinkKey linkKey1 = LinkKey.linkKey(src, dst);

        /**Si estamos en modo 1 y uno de los dos enlaces es un sensor, entonces el enlace no es durable */
        if ((!srcId.contains("sw") && !srcId.contains("of")) || (!dstId.contains("sw") && !dstId.contains("of"))){
            /** Le comunicaciones que es bidireccional y no es durable */
            link_config = new BasicLinkConfig(linkKey1).isBidirectional(false).isDurable(true);
        }
        else{
            /** Si por el contrario estamos en modo 0 o se trata de un enlace entre nodos, si podemos decir que es durable */
            link_config = new BasicLinkConfig(linkKey1).isBidirectional(true).isDurable(true);
        }

        SparseAnnotations sa = insertannotation(link_config);

        LinkDescription ld1 = new DefaultLinkDescription(linkKey1.src(), linkKey1.dst(), Link.Type.DIRECT, sa);

        linkProviderService.linkVanished(ld1);
    }

    /** @briefSignals that an infrastructure link has disappeared.
     *
     * @param linkDescription
     * @param linkProviderService
     */
    public void linkVanished(LinkDescription linkDescription, LinkProviderService linkProviderService) {
        linkProviderService.linkVanished(linkDescription);
    }

    /** @briefSignals that infrastructure links associated with the specified connect point have vanished.
     *
     * @param connectPoint
     * @param linkProviderService
     */
     public void linksVanished(ConnectPoint connectPoint, LinkProviderService linkProviderService) {
        linkProviderService.linksVanished(connectPoint);
    }

    /** @brief Signals that infrastructure links associated with the specified  device have vanished.
     *
     * @param deviceId
     * @param linkProviderService
     */
    public void linksVanished(DeviceId deviceId, LinkProviderService linkProviderService) {
        linkProviderService.linksVanished(deviceId);
    }

    /** @brief Recopila los enlaces configurados
     *
     * @param netCfgService NetworkConfigRegistry
     * @param configuredLinks conjunto de enlaces (LinkKey)
     */
    public void createLinks(NetworkConfigRegistry netCfgService, Set<LinkKey> configuredLinks) {
        netCfgService.getSubjects(LinkKey.class).forEach(LinkKey -> configuredLinks.add(LinkKey));
    }

    /** @brief Crea un enlace entre dos dispositivos SDN
     *
     * @param configuredLinks conjunto de enlaces (LinkKey)
     * @param srcDpId identificador string del switch origen del enlace
     * @param srcport identificador int del puerto origen del enlace
     * @param dstDpId identificador string del switch destino del enlace
     * @param dstport identificador int del puerto destino del enlace
     * @param deviceService DeviceService
     * @param linkProviderService LinkProviderService
     * @return true Si todo es correcto, false en caso contrario
     */
    public boolean linkbewteendevices(DeviceService deviceService, LinkProviderService linkProviderService,
                                      Set<LinkKey> configuredLinks, String srcDpId , int srcport, String dstDpId,
                                      int dstport, short modeDHT) {

        BasicLinkConfig link_config;

        /*Los enlaces con los host no se hacen asi, se les indica como localización*/
        if (srcDpId.contains("sn") || dstDpId.contains("sn"))
            return true;

        /** Datos sobre el origen del enlace */
        DeviceId srcDeviceId = DeviceId.deviceId(srcDpId);
        PortNumber srcPortNumber = portNumber(srcport);
        ConnectPoint src = new ConnectPoint(srcDeviceId, srcPortNumber);

        /** Datos sobre el destino del enlace */
        DeviceId dstDeviceId = DeviceId.deviceId(dstDpId);
        PortNumber dstPortNumber = portNumber(dstport);
        ConnectPoint dst = new ConnectPoint(dstDeviceId, dstPortNumber);

        /** Enlaces en un sentido y el otro */
        LinkKey linkKey1 = LinkKey.linkKey(src, dst);

        /**Si estamos en modo 1 y uno de los dos enlaces es un sensor, entonces el enlace no es durable */
        if (modeDHT == 1 && ((!srcDpId.contains("sw") && !srcDpId.contains("of")) ||
                (!dstDpId.contains("sw") && !dstDpId.contains("of")))){
            /** Le comunicaciones que es bidireccional y no es durable */
            link_config = new BasicLinkConfig(linkKey1)
                    .isBidirectional(true).isDurable(false); //indicamos que no es bidireccional para saber que es wifi
        }
        else{
            /** Si por el contrario estamos en modo 0 o se trata de un enlace entre nodos, si podemos decir que es durable */
            link_config = new BasicLinkConfig(linkKey1)
                    .isBidirectional(true).isDurable(true);
        }

        SparseAnnotations sa = insertannotation(link_config);

        LinkDescription ld1 = new DefaultLinkDescription(linkKey1.src(), linkKey1.dst(), Link.Type.DIRECT, sa);
        LinkDescription ld2 = new DefaultLinkDescription(linkKey1.dst(), linkKey1.src(), Link.Type.DIRECT, sa);

        /** Genero el linkkey entre ambos equipos */
        try{
            linkDetected(ld1, linkProviderService);
            linkDetected(ld2, linkProviderService);
            if (!configuredLinks.contains(linkKey1)) {
                configuredLinks.add(linkKey1);
            }
        }catch (Exception e){
            log.error("ERROR: ALGO NO VA BIEN CON LA CREACION DE LOS ENLACES!!!");
            log.error("toString(): "  + e.toString());
            log.error("getMessage(): " + e.getMessage());
        }
        return true;
    }

    /** @brief Genera los enlaces definidos por el protocolo en la topologia de onos
     *
     * @param configuredLinks conjunto de enlaces (LinkKey)
     * @param srcDpIdpacketin string del switch origen del enlace
     * @param srcportpacketin identificador int del puerto origen del enlace
     * @param Packet_in_dht class DHTpacket
     * @param deviceService DeviceService
     * @param linkProviderService LinkProviderService
     * @return true si todo ok, false en caso contrario
     */
    public boolean linkstopology(Set<LinkKey> configuredLinks, String srcDpIdpacketin , int srcportpacketin,
                                 DHTpacket Packet_in_dht, DeviceService deviceService,
                                 LinkProviderService linkProviderService, short modeDHT, String TYPE_SENSORS[])
    {
        String dstDpid[] = new String[2];
        short types_divices[] = Packet_in_dht.getTypedevices();
        int in_ports[]= Packet_in_dht.getinports();
        int out_ports[]= Packet_in_dht.getoutports();
        long Id_Devices[]= Packet_in_dht.getidmacdevices();

        /** El primer elemento es especial ya que se conecta con el SDN */
        for (int num = 0; num < Packet_in_dht.getNumHops(); num ++){
            if ( modeDHT == 0 && types_divices[num] > 2) /** En el modo 0 los sensores no se conectan asi */
                continue;

            /** Estamos en el caso de conexión con el Switch SDN */
            switch(types_divices[num])
            {
                case 1: /* NO SDN case */
                    dstDpid[0] = "of:"+parser_idpacket_to_iddevice(Id_Devices[num]);
                    break;
                case 2:
                    dstDpid[0] = "sw:"+Long.toHexString(Id_Devices[num]);
                    break;
                default: /* NO SDN case and Sensor case */
                    dstDpid[0] = Long.toHexString(Id_Devices[num]);
                    break;
            }

            /** Si estamos en el ultimo elemento lo unimos con el sdn device que ha enviado el packet in */
            if (num + 1 == Packet_in_dht.getNumHops())
            {
                try{
                    if (out_ports[num] != 0 && srcportpacketin != 0 && dstDpid[0] != srcDpIdpacketin ){
                        linkbewteendevices(deviceService, linkProviderService, configuredLinks, dstDpid[0],
                                out_ports[num], srcDpIdpacketin, srcportpacketin, modeDHT);
                    }
                }catch (Exception e){
                    log.error("DHTapp ERROR al crear nuevos Enlaces entre device y sdn : "+ e.getMessage());
                    return false;
                }
            }
            else { /* actualizacion 2020 el 2º extremo del enlace debe ser el de arriba o este */
                switch (types_divices[num + 1]) {
                    case 1: /* NO SDN case */
                        dstDpid[1] = "of:" + parser_idpacket_to_iddevice(Id_Devices[num + 1]);
                        break;
                    case 2:
                        dstDpid[1] = "sw:" + Long.toHexString(Id_Devices[num + 1]);
                        break;
                    default: /* NO SDN case and Sensor case */
                        dstDpid[1] = Long.toHexString(Id_Devices[num + 1]);
                        break;
                }
                try {
                    if (out_ports[num] != 0 && in_ports[num + 1] != 0 && dstDpid[0] != dstDpid[1]) {
                        linkbewteendevices(deviceService, linkProviderService, configuredLinks, dstDpid[0],
                                out_ports[num], dstDpid[1], in_ports[num + 1], modeDHT);
                    }
                } catch (Exception e) {
                    log.error("DHTapp ERROR al crear nuevos Enlaces entre devices genericos : " + e.getMessage());
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * @brief Parsea la id recibida en el paquete a una valida para el sistema *
     * @param dpid Id del dispositivo (long)
     */
    public String parser_idpacket_to_iddevice(long dpid) {
        String DpidString = Long.toHexString(dpid);
        int len = DpidString.length();

        for(int aux = len; aux<16; aux++){
            DpidString="0"+ DpidString;
        }
        return DpidString;
    }


    /**
     * Generates an annotation from an existing annotation and LinkConfig.
     *
     * @param cfg the link config entity from network config
     * @return annotation combining both sources
     */

    public static DefaultAnnotations insertannotation(BasicLinkConfig cfg) {
        DefaultAnnotations.Builder annotations = DefaultAnnotations.builder();

        if (cfg.metric() != DEF_METRIC) {
            annotations.set(AnnotationKeys.METRIC, String.valueOf(cfg.metric()));
        }
        if (cfg.latency() != DEF_DURATION) {
            annotations.set(AnnotationKeys.LATENCY, cfg.latency().toString());
        }
        if (cfg.bandwidth() != DEF_BANDWIDTH) {
            annotations.set(AnnotationKeys.BANDWIDTH, String.valueOf(cfg.bandwidth()));
        }
        if (cfg.isDurable() != false) {
            annotations.set(AnnotationKeys.DURABLE, String.valueOf(cfg.isDurable()));
        }
        if (cfg.isBidirectional() != false){
            annotations.set("Bidirectional", String.valueOf(cfg.isBidirectional()));
        }
        return annotations.build();
    }

    @Override
    public ProviderId id() {
        return PID;
    }
}
